// <auto-generated />
using System;
using BlindDating.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlindDating.Migrations.BlindDating
{
    [DbContext(typeof(BlindDatingContext))]
    partial class BlindDatingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlindDating.Models.DatingProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnName("age");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnName("bio")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnName("displayName")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("gender")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhotoPath")
                        .HasColumnName("photoPath")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DatingProfile");
                });

            modelBuilder.Entity("BlindDating.Models.MailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FromProfileId")
                        .HasColumnName("fromProfileID");

                    b.Property<bool>("IsRead")
                        .HasColumnName("isRead");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnName("messageText")
                        .HasColumnType("text");

                    b.Property<string>("MessageTitle")
                        .IsRequired()
                        .HasColumnName("messageTitle")
                        .IsUnicode(false);

                    b.Property<int?>("ToProfileId")
                        .HasColumnName("toProfileID");

                    b.HasKey("Id");

                    b.HasIndex("FromProfileId");

                    b.HasIndex("ToProfileId");

                    b.ToTable("MailMessage");
                });

            modelBuilder.Entity("BlindDating.Models.MailMessage", b =>
                {
                    b.HasOne("BlindDating.Models.DatingProfile", "FromProfile")
                        .WithMany("MailMessageFromProfile")
                        .HasForeignKey("FromProfileId")
                        .HasConstraintName("FK__MailMessa__fromP__02FC7413");

                    b.HasOne("BlindDating.Models.DatingProfile", "ToProfile")
                        .WithMany("MailMessageToProfile")
                        .HasForeignKey("ToProfileId")
                        .HasConstraintName("FK__MailMessa__toPro__03F0984C");
                });
#pragma warning restore 612, 618
        }
    }
}
